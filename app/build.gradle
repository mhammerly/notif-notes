apply plugin: 'com.android.application'

android {
    compileSdkVersion 25
    buildToolsVersion '23.0.3'

    defaultConfig {
        applicationId "com.matt.notifs"
        minSdkVersion 17
        targetSdkVersion 25
        versionCode 2
        versionName "0.1"
        vectorDrawables.useSupportLibrary = true
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }

    }

    packagingOptions {
        exclude 'META-INF/services/javax.annotation.processing.Processor'
        return void
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_7
        targetCompatibility JavaVersion.VERSION_1_7
    }

    productFlavors {

        dev {
            return void
        }

        prod {
            return void
        }
    }
    return void
}

String getJavaHome(String version) {
//    def stdout = new ByteArrayOutputStream()
//    exec {
//        commandLine "/usr/libexec/java_home", "-v", version
//        standardOutput = stdout;
//    }
//    return stdout.toString().trim()
    return "/etc/java-config-2/current-system-vm"
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    compile "com.android.support:appcompat-v7:$rootProject.supportLibraryVersion"
    compile "com.android.support:support-v13:$rootProject.supportLibraryVersion"
    compile "com.android.support:support-v4:$rootProject.supportLibraryVersion"
    compile "com.android.support:design:$rootProject.supportLibraryVersion"
    compile "com.android.support:cardview-v7:$rootProject.supportLibraryVersion"
    compile "com.android.support:recyclerview-v7:$rootProject.supportLibraryVersion"

    // Dependencies for local unit tests
    testCompile "junit:junit:$rootProject.ext.junitVersion"
}

/*
Resolves dependency versions across test and production APKs, specifically, transitive
dependencies. This is required since Espresso internally has a dependency on support-annotations.
*/
configurations.all {
    resolutionStrategy.force "com.android.support:support-annotations:$rootProject.supportLibraryVersion"
}

/*
All direct/transitive dependencies shared between your test and production APKs need to be
excluded from the test APK! This is necessary because both APKs will contain the same classes. Not
excluding these dependencies from your test configuration will result in an dex pre-verifier error
at runtime. More info in this tools bug: (https://code.google.com/p/android/issues/detail?id=192497)
*/
configurations.compile.dependencies.each { compileDependency ->
    println "Excluding compile dependency: ${compileDependency.getName()}"
    configurations.androidTestCompile.dependencies.each { androidTestCompileDependency ->
        configurations.androidTestCompile.exclude module: "${compileDependency.getName()}"
    }
}

// apply plugin: 'com.google.gms.google-services'

task appStart(type: Exec, dependsOn: 'installDevDebug') {
    def adb = "$System.env.ANDROID_HOME/platform-tools/adb"
    commandLine "$adb", "shell", "am", "start", "-n", "com.matt.notifs/.Activity.MainActivity"
}
